/**
 * validate插件详细说明
 */

关于文件和资源的获取
	http://static.runoob.com/download/jquery-validation-1.14.0.zip

加载插件到项目中
	<script type="text/javascript" src="<%=basePath%>/resources/js/jquery1.10.2.js"></script>	
	<script type="text/javascript" src="<%=basePath%>/resources/plugins/validation/jquery.validation-1.11.1.js"></script>

第一种使用方式:使用声明式
	<form id="addUserInfo" name="AddUserInfo" action="http://localhost:8080/12spring/post/form">	
		<p>用 户 名：<input type="text" class="required" minlength="2" name="user" /> (*)</p>			
		<p><input type="submit" name="BtnSubmit" value="提交" /></p>				
	</form>
	$('#addUserInfo').validate({
		submitHandler:function(form){
			console.log($(form).serialize());
			return false;
		}
	});	

第二种使用方式：使用js完成验证
	<form id="addUserInfo" name="AddUserInfo" action="http://localhost:8080/12spring/post/form">			
		<p>账号：<input type="text" name="name" /></p>	
		<p>密码：<input type="text" name="password" /></p>
		<p><input type="submit" name="BtnSubmit" value="提交" /></p>		
	</form>
	$('#addUserInfo').validate({
		rules:{
			name: {
		       	required: true,
		       	minlength:6
		   	},
		   	password: {
		       	required: true,
		       	minlength: 6
		   	}
		},
		messages:{                 //这个可以不写，使用默认的提示信息
			name:{
				required:"必须输入用户名",
				minlength:"密码不可低于6位"
			},
			password:{
				required:"必须输入密码",
				minlength:"密码不可低于6位"
			}
		},
		submitHandler:function(form){
			console.log($(form).serialize());
			return false;
		}
	});	

第三种验证方式：使用元数据方式
	
	使用class="{}"的方式，必须引入包：jquery.metadata.js；
	
	可以使用如下的方法，修改提示内容：class="{required:true,minlength:5,messages:{required:'请输入内容',minlength:"不可少于5位"}}"；
	
	尽管我也提供了这些资源文件，我本地测试始终这种写法不成功，因此推荐使用class的写法  或者属性的写法。
	
	
关于提交方式有以下几种

	1> 上面使用submitHandler函数的方式是validate提供的默认支持方式，但由于js的非线程阻塞性，方法内部必须使用return false,阻止表单默认提交，参见以上说明；
	
	2> 结合异步表单插件，这种写法非常让人误解，不推荐
	<script type="text/javascript" src="<%=basePath%>/resources/plugins/form/jquery-form.js"></script>
	<form id="addUserInfo" name="AddUserInfo" action="">			
		<p>账号：<input type="text" name="name" class="required"  minlength="3" /></p>		
		<p>密码：<input type="text" name="password" class="required"  minlength="3" /></p>
		<p><input type="submit" name="BtnSubmit" value="提交" /></p>				
	</form>
	$('#addUserInfo').validate({
		focusInvalid:true,
		submitHandler:function(form){
			$(form).ajaxSubmit({
        		type:"post",
        		url:"http://localhost:8080/12spring/post/form?time="+ (new Date()).getTime(),
        		success: function(da){
        			console.log(da);
        		}
      		});
		},
		success:function(res){
			//console.log(res);
		}
	});	
	
	提交方式二也可以使用ajaxForm的beforeSubmint(),但是这种本质还是ajaxForm，都是不推荐的方式。
	
	3> 使用validate.valid()方法后根据返回值决定是否提交和提交的内容
	$('#addUserInfo').submit(function(){
		if($(this).valid()){
			alert("可以提交了");
		}else{
			alert("验证未能通过");
		}
		return false; //此处必须返回false，阻止常规的form提交	
	});
	这种写法让程序员自己控制何时提交，这样就非常灵活了，赵老大他们明显喜欢这种写法，因为可以使用$(this).valid()方法，这样这种写法可以多个变种，比如按钮在表单外以后就可以任意控制表单啦！！
	
			
默认提供的验证规则
	序号	规则	描述
	1	required:true	必须输入的字段。
	2	remote:"check.php"	使用 ajax 方法调用 check.php 验证输入值。
	3	email:true	必须输入正确格式的电子邮件。
	4	url:true	必须输入正确格式的网址。
	5	date:true	必须输入正确格式的日期。日期校验 ie6 出错，慎用。
	6	dateISO:true	必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只验证格式，不验证有效性。
	7	number:true	必须输入合法的数字（负数，小数）。
	8	digits:true	必须输入整数。
	9	creditcard:	必须输入合法的信用卡号。
	10	equalTo:"#field"	输入值必须和 #field 相同。
	11	accept:	输入拥有合法后缀名的字符串（上传文件的后缀）。
	12	maxlength:5	输入长度最多是 5 的字符串（汉字算一个字符）。
	13	minlength:10	输入长度最小是 10 的字符串（汉字算一个字符）。
	14	rangelength:[5,10]	输入长度必须介于 5 和 10 之间的字符串（汉字算一个字符）。
	15	range:[5,10]	输入值必须介于 5 和 10 之间。
	16	max:5	输入值不能大于 5。
	17	min:10	输入值不能小于 10。	
	

参数	类型	描述	默认值
errorClass	String	指定错误提示的 css 类名，可以自定义错误提示的样式。	"error"                           默认添加的label标签是error，我们可以冲突这里的样式<label for="name" class="error">This field is required.</label>
errorElement	String	用什么标签标记错误，默认是 label，可以改成 em。	"label"                       对于input来说，默认会这之后动态加入一个label，仅仅用于显示字符
errorContainer	Selector	显示或者隐藏验证信息，可以自动实现有错误信息出现时把容器属性变为显示，无错误时隐藏，用处不大。
errorContainer: "#messageBox1, #messageBox2"	
errorLabelContainer	Selector	把错误信息统一放在一个容器里面。	
wrapper	String	用什么标签再把上边的 errorELement 包起来。		


该方法指定每个控件通过验证后各自响应的行为，传入的label是后面的label标签
success：String,Callback
要验证的元素通过验证后的动作，如果跟一个字符串，会当作一个 css 类，也可跟一个函数。
success: function(label) {
    // set &nbsp; as text for IE
    label.html("&nbsp;").addClass("checked");
    //label.addClass("valid").text("Ok!")
}


7、验证的触发方式修改
下面的虽然是 boolean 型的，但建议除非要改为 false，否则别乱添加。
触发方式	类型	描述	默认值
onsubmit	Boolean	提交时验证。设置为 false 就用其他方法去验证。	true
onfocusout	Boolean	失去焦点时验证（不包括复选框/单选按钮）。	true
onkeyup	Boolean	在 keyup 时验证。	true
onclick	Boolean	在点击复选框和单选按钮时验证。	true
focusInvalid	Boolean	提交表单后，未通过验证的表单（第一个或提交之前获得焦点的未通过验证的表单）会获得焦点。	true
focusCleanup	Boolean	如果是 true 那么当未通过验证的元素获得焦点时，移除错误提示。避免和 focusInvalid 一起用。	false	

异步验证
remote: {
    url: "check-email.php",     //后台处理程序
    type: "post",               //数据发送方式
    dataType: "json",           //接受数据格式   
    data: {                     //要传递的数据
        username: function() {
            return $("#username").val();
        }
    }
}


9、添加自定义校验
addMethod：name, method, message
自定义验证方法
// 中文字两个字节
jQuery.validator.addMethod("byteRangeLength", function(value, element, param) {
    var length = value.length;
    for(var i = 0; i < value.length; i++){
        if(value.charCodeAt(i) > 127){
            length++;
        }
    }
  return this.optional(element) || ( length >= param[0] && length <= param[1] );   
}, $.validator.format("请确保输入的值在{0}-{1}个字节之间(一个中文字算2个字节)"));

// 邮政编码验证   
jQuery.validator.addMethod("isZipCode", function(value, element) {   
    var tel = /^[0-9]{6}$/;
    return this.optional(element) || (tel.test(value));
}, "请正确填写您的邮政编码");
注意：要在 additional-methods.js 文件中添加或者在 jquery.validate.js 文件中添加。建议一般写在 additional-methods.js 文件中。
注意：在 messages_cn.js 文件中添加：isZipCode: "只能包括中文字、英文字母、数字和下划线"。调用前要添加对 additional-methods.js 文件的引用。



10、radio 和 checkbox、select 的验证
radio 的 required 表示必须选中一个。
<input  type="radio" id="gender_male" value="m" name="gender" required />
<input  type="radio" id="gender_female" value="f" name="gender"/>
checkbox 的 required 表示必须选中。
<input type="checkbox" class="checkbox" id="agree" name="agree" required />
checkbox 的 minlength 表示必须选中的最小个数，maxlength 表示最大的选中个数，rangelength:[2,3] 表示选中个数区间。
<input type="checkbox" class="checkbox" id="spam_email" value="email" name="spam[]" required minlength="2" />
<input type="checkbox" class="checkbox" id="spam_phone" value="phone" name="spam[]" />
<input type="checkbox" class="checkbox" id="spam_mail" value="mail" name="spam[]" />
select 的 required 表示选中的 value 不能为空。
<select id="jungle" name="jungle" title="Please select something!" required>
    <option value=""></option>
    <option value="1">Buga</option>
    <option value="2">Baga</option>
    <option value="3">Oi</option>
</select>
select 的 minlength 表示选中的最小个数（可多选的 select），maxlength 表示最大的选中个数，rangelength:[2,3] 表示选中个数区间。
<select id="fruit" name="fruit" title="Please select at least two fruits" class="{required:true, minlength:2}" multiple="multiple">
    <option value="b">Banana</option>
    <option value="a">Apple</option>
    <option value="p">Peach</option>
    <option value="t">Turtle</option>
</select>



jQuery.validate 中文 API
名称	返回类型	描述
validate(options)	Validator	验证所选的 FORM。
valid()	Boolean	检查是否验证通过。
rules()	Options	返回元素的验证规则。
rules("add",rules)	Options	增加验证规则。
rules("remove",rules)	Options	删除验证规则。
removeAttrs(attributes)	Options	删除特殊属性并且返回它们。
自定义选择器
:blank	Validator	没有值的筛选器。
:filled	Array <Element>	有值的筛选器。
:unchecked	Array <Element>	没选择的元素的筛选器。
实用工具
jQuery.format(template,argument,argumentN...)	String	用参数代替模板中的 {n}。
Validator
validate 方法返回一个 Validator 对象。Validator 对象有很多方法可以用来引发校验程序或者改变 form 的内容，下面列出几个常用的方法。
名称	返回类型	描述
form()	Boolean	验证 form 返回成功还是失败。
element(element)	Boolean	验证单个元素是成功还是失败。
resetForm()	undefined	把前面验证的 FORM 恢复到验证前原来的状态。
showErrors(errors)	undefined	显示特定的错误信息。
Validator 函数
setDefaults(defaults)	undefined	改变默认的设置。
addMethod(name,method,message)	undefined	添加一个新的验证方法。必须包括一个独一无二的名字，一个 JAVASCRIPT 的方法和一个默认的信息。
addClassRules(name,rules)	undefined	增加组合验证类型，在一个类里面用多种验证方法时比较有用。
addClassRules(rules)	undefined	增加组合验证类型，在一个类里面用多种验证方法时比较有用。这个是同时加多个验证方法。
内置验证方式
名称	返回类型	描述
required()	Boolean	必填验证元素。
required(dependency-expression)	Boolean	必填元素依赖于表达式的结果。
required(dependency-callback)	Boolean	必填元素依赖于回调函数的结果。
remote(url)	Boolean	请求远程校验。url 通常是一个远程调用方法。
minlength(length)	Boolean	设置最小长度。
maxlength(length)	Boolean	设置最大长度。
rangelength(range)	Boolean	设置一个长度范围 [min,max]。
min(value)	Boolean	设置最小值。
max(value)	Boolean	设置最大值。
email()	Boolean	验证电子邮箱格式。
range(range)	Boolean	设置值的范围。
url()	Boolean	验证 URL 格式。
date()	Boolean	验证日期格式（类似 30/30/2008 的格式，不验证日期准确性只验证格式）。
dateISO()	Boolean	验证 ISO 类型的日期格式。
dateDE()	Boolean	验证德式的日期格式（29.04.1994 或 1.1.2006）。
number()	Boolean	验证十进制数字（包括小数的）。
digits()	Boolean	验证整数。
creditcard()	Boolean	验证信用卡号。
accept(extension)	Boolean	验证相同后缀名的字符串。
equalTo(other)	Boolean	验证两个输入框的内容是否相同。
phoneUS()	Boolean	验证美式的电话号码。
validate ()的可选项
描述	代码
debug：进行调试模式（表单不提交）。	
$(".selector").validate
({
    debug:true
})
把调试设置为默认。	
$.validator.setDefaults({
    debug:true
})
submitHandler：通过验证后运行的函数，里面要加上表单提交的函数，否则表单不会提交。	
$(".selector").validate({
    submitHandler:function(form) {
        $(form).ajaxSubmit();
    }
})
ignore：对某些元素不进行验证。	
$("#myform").validate({
    ignore:".ignore"
})
rules：自定义规则，key:value 的形式，key 是要验证的元素，value 可以是字符串或对象。	
$(".selector").validate({
    rules:{
        name:"required",
        email:{
            required:true,
            email:true
        }
    }
})
messages：自定义的提示信息，key:value 的形式，key 是要验证的元素，value 可以是字符串或函数。	
$(".selector").validate({
    rules:{
        name:"required",
        email:{
            required:true,
            email:true
        }
    },
    messages:{
        name:"Name不能为空",
        email:{       
            required:"E-mail不能为空",
            email:"E-mail地址不正确"
        }
    }
})
groups：对一组元素的验证，用一个错误提示，用 errorPlacement 控制把出错信息放在哪里。	
$("#myform").validate({
    groups:{
        username:"fname 
        lname"
    },
    errorPlacement:function(error,element) {
        if (element.attr("name") == "fname" || element.attr("name") == "lname")   
            error.insertAfter("#lastname");
        else    
            error.insertAfter(element);
    },
   debug:true
})
OnSubmit：类型 Boolean，默认 true，指定是否提交时验证。	
$(".selector").validate({  
    onsubmit:false
})
onfocusout：类型 Boolean，默认 true，指定是否在获取焦点时验证。	
$(".selector").validate({   
    onfocusout:false
})
onkeyup：类型 Boolean，默认 true，指定是否在敲击键盘时验证。	
$(".selector").validate({
   onkeyup:false
})
onclick：类型 Boolean，默认 true，指定是否在鼠标点击时验证（一般验证 checkbox、radiobox）。	
$(".selector").validate({
   onclick:false
})
focusInvalid：类型 Boolean，默认 true。提交表单后，未通过验证的表单（第一个或提交之前获得焦点的未通过验证的表单）会获得焦点。	
$(".selector").validate({
   focusInvalid:false
})
focusCleanup：类型 Boolean，默认 false。当未通过验证的元素获得焦点时，移除错误提示（避免和 focusInvalid 一起使用）。	
$(".selector").validate({
   focusCleanup:true
})
errorClass：类型 String，默认 "error"。指定错误提示的 css 类名，可以自定义错误提示的样式。	
$(".selector").validate({ 
    errorClass:"invalid"
})
errorElement：类型 String，默认 "label"。指定使用什么标签标记错误。	
$(".selector").validate
   errorElement:"em"
})
wrapper：类型 String，指定使用什么标签再把上边的 errorELement 包起来。	
$(".selector").validate({
   wrapper:"li"
})
errorLabelContainer：类型 Selector，把错误信息统一放在一个容器里面。	
$("#myform").validate({   
    errorLabelContainer:"#messageBox",
    wrapper:"li",
    submitHandler:function() { 
        alert("Submitted!") 
    }
})
showErrors：跟一个函数，可以显示总共有多少个未通过验证的元素。	
$(".selector").validate({  
    showErrors:function(errorMap,errorList) {
        $("#summary").html("Your form contains " + this.numberOfInvalids() + " errors,see details below.");
        this.defaultShowErrors();
    }
})
errorPlacement：跟一个函数，可以自定义错误放到哪里。	
$("#myform").validate({  
    errorPlacement:function(error,element) {  
        error.appendTo(element.parent("td").next("td"));
   },
   debug:true
})
success：要验证的元素通过验证后的动作，如果跟一个字符串，会当作一个 css 类，也可跟一个函数。	
$("#myform").validate({        
    success:"valid",
        submitHandler:function() { 
            alert("Submitted!") 
        }
})
highlight：可以给未通过验证的元素加效果、闪烁等。	
addMethod(name,method,message)方法
参数 name 是添加的方法的名字。
参数 method 是一个函数，接收三个参数 (value,element,param) 。
value 是元素的值，element 是元素本身，param 是参数。
我们可以用 addMethod 来添加除内置的 Validation 方法之外的验证方法。比如有一个字段，只能输一个字母，范围是 a-f，写法如下：
$.validator.addMethod("af",function(value,element,params){  
    if(value.length>1){
        return false;
    }
    if(value>=params[0] && value<=params[1]){
        return true;
    }else{
        return false;
    }
},"必须是一个字母,且a-f");
如果有个表单字段的 name="username"，则在 rules 中写：
username:{
   af:["a","f"]
}
addMethod 的第一个参数，是添加的验证方法的名字，这时是 af。
addMethod 的第三个参数，是自定义的错误提示，这里的提示为:"必须是一个字母,且a-f"。
addMethod 的第二个参数，是一个函数，这个比较重要，决定了用这个验证方法时的写法。
如果只有一个参数，直接写，比如 af:"a"，那么 a 就是这个唯一的参数，如果多个参数，则写在 [] 里，用逗号分开。
meta String 方式
$("#myform").validate({

   meta:"validate",

   submitHandler:function() { 
alert("Submitted!") }

})
<script type="text/javascript" 
src="js/jquery.metadata.js"></script>

<script type="text/javascript" 
src="js/jquery.validate.js"></script>

<form id="myform">

  <input type="text" 
name="email" class="{validate:{ required:true,email:true }}" />

  <input type="submit" 
value="Submit" />

</form>








	